import socket

# Dictionary mapping port numbers to common vulnerabilities
common_vulnerabilities = {
    21: "FTP Server Vulnerability",
    22: "SSH Server Vulnerability",
    80: "HTTP Server Vulnerability",
    443: "HTTPS Server Vulnerability",
    # Add more port-vulnerability mappings as needed
}

def scan_ports(target_host, start_port, end_port):
    try:
        target_ip = socket.gethostbyname(target_host)
    except socket.gaierror:
        print("Invalid target host")
        return

    for port in range(start_port, end_port + 1):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)  # Set socket timeout to 1 second
            result = sock.connect_ex((target_ip, port))
            if result == 0:
                print(f"Port {port} is open")

                # Perform version detection
                try:
                    banner = get_banner(sock)
                    print(f"Banner for port {port}: {banner}")
                except Exception as e:
                    print(f"Error retrieving banner for port {port}: {e}")

                # Check for common vulnerabilities
                if port in common_vulnerabilities:
                    print(f"Potential vulnerability on port {port}: {common_vulnerabilities[port]}")

def get_banner(sock):
    banner = sock.recv(1024).decode().strip()
    return banner

if __name__ == "__main__":
    target_host = input("Enter target host: ")
    start_port = int(input("Enter start port: "))
    end_port = int(input("Enter end port: "))

    scan_ports(target_host, start_port, end_port)
